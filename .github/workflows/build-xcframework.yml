name: Build libXray XCFramework

on:
  workflow_dispatch:

jobs:
  build-xcframework:
    runs-on: macos-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x' # pick the latest stable Go

      - name: Install Homebrew packages
        run: |
          brew update
          brew install cmake ninja python3 pkg-config

      - name: Add GOPATH bin to PATH
        run: echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Checkout libXray
        uses: actions/checkout@v4
        with:
          repository: XTLS/libXray
          path: libxray

      - name: Checkout Xray-core
        uses: actions/checkout@v4
        with:
          repository: XTLS/Xray-core
          path: xray-core

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Run libXray build (apple gomobile)
        working-directory: libxray
        run: |
          python3 build/main.py apple gomobile

      - name: Find XCFramework
        id: find
        run: |
          xc=$(find libxray -name '*.xcframework' -print -quit || true)
          echo "path=$xc" >> $GITHUB_OUTPUT

      - name: Create XCFramework (fallback)
        if: steps.find.outputs.path == ''
        run: |
          libdev=$(find libxray -name '*ios*arm64*.a' -print -quit || true)
          libsim=$(find libxray -name '*iossim*arm64*.a' -print -quit || true)
          headers=$(find libxray -type d -name include -print -quit || true)
          mkdir -p out
          xcodebuild -create-xcframework \
            -library "$libdev" -headers "$headers" \
            -library "$libsim" -headers "$headers" \
            -output out/libXray.xcframework

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libXray-xcframework
          path: |
            ${{ steps.find.outputs.path }}
            out/libXray.xcframework
